{"version":3,"file":"static/js/389.38b7739b.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts","../node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":["import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  public clientId: string;\n\n  constructor(params: { clientId?: string } = {}) {\n    super();\n    this.clientId = params.clientId;\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(chainNamespace, signedMessage as string, challenge, this.name, this.sessionTime, this.clientId);\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport interface MetamaskAdapterOptions {\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n  clientId?: string;\n}\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private rehydrated = false;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  constructor(adapterOptions: MetamaskAdapterOptions) {\n    super(adapterOptions);\n    this.chainConfig = adapterOptions?.chainConfig || null;\n    this.sessionTime = adapterOptions?.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(options: { sessionTime?: number; clientId?: string }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    // set default to mainnet\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnect();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId: chainConfig.chainId, chainName: chainConfig.displayName, rpcUrls: [chainConfig.rpcTarget] }],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n"],"names":["BaseEvmAdapter","_inherits","params","_classCallCheck","_this","_defineProperty","clientId","_createClass","key","value","_authenticateUser","this","provider","chainConfig","_this$chainConfig","chainId","_context","WalletLoginError","_this$chainConfig2","chainNamespace","status","ADAPTER_STATUS","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","signedMessage","verifySignedChallenge","sessionTime","saveToken","_disconnect","_context2","clearToken","BaseAdapter","MetamaskAdapter","adapterOptions","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","WALLET_ADAPTERS","metamaskProvider","set","_","Error","options","_get","detectEthereumProvider","mustBeMetaMask","WalletInitializationError","emit","ADAPTER_EVENTS","log","autoConnect","rehydrated","connect","getChainConfig","adapter","switchChain","once","_this2","disconnect","reconnected","_args3","cleanup","_context3","removeAllListeners","_context4","_context5","code","chainName","displayName","rpcUrls","rpcTarget"],"sourceRoot":""}